title: Group related declarations or methods together to show structure
id: STYLE001

description: |-
  Related methods, variables, and declarations should be grouped together to make 
  the code structure and organization immediately apparent. This visual organization 
  helps developers quickly understand the different responsibilities and capabilities 
  of a class or module.

problems_with_scattered_related_code:
  - Class responsibilities are not immediately clear
  - Developers must scan the entire class to find related methods
  - Code maintenance becomes more difficult
  - Related functionality appears unrelated due to distance
  - Class organization appears random and unstructured
  - Refactoring and testing become more complex

solutions_for_effective_grouping:
  - Group methods by their functional responsibility
  - Use comments to label different sections
  - Place initialization methods first
  - Group public methods before private methods
  - Keep related helper methods near their callers
  - Use consistent ordering patterns across similar classes
  - Consider splitting large classes with many distinct groups

examples:
  - scenario: Database connection manager
    before: |
      ```python
      class DatabaseManager:
          def close_connection(self): ...
          def get_user(self, user_id): ...
          def open_connection(self): ...
          def create_user(self, user_data): ...
          def reconnect(self): ...
          def update_user(self, user_id, data): ...
          def check_connection(self): ...
          def delete_user(self, user_id): ...
      ```
    after: |
      ```python
      class DatabaseManager:
          # Connection management
          def open_connection(self): ...
          def close_connection(self): ...
          def check_connection(self): ...
          def reconnect(self): ...
          
          # User operations
          def get_user(self, user_id): ...
          def create_user(self, user_data): ...
          def update_user(self, user_id, data): ...
          def delete_user(self, user_id): ...
      ```

  - scenario: E-commerce shopping cart
    before: |
      ```python
      class ShoppingCart:
          def calculate_tax(self): ...
          def add_item(self, item): ...
          def send_receipt(self): ...
          def remove_item(self, item_id): ...
          def apply_discount(self, code): ...
          def get_total(self): ...
          def clear_cart(self): ...
          def process_payment(self): ...
          def update_quantity(self, item_id, qty): ...
      ```
    after: |
      ```python
      class ShoppingCart:
          # Item management
          def add_item(self, item): ...
          def remove_item(self, item_id): ...
          def update_quantity(self, item_id, qty): ...
          def clear_cart(self): ...
          
          # Price calculations
          def get_total(self): ...
          def calculate_tax(self): ...
          def apply_discount(self, code): ...
          
          # Checkout process
          def process_payment(self): ...
          def send_receipt(self): ...
      ```

  - scenario: File processing utility
    before: |
      ```python
      class FileProcessor:
          def compress_file(self, path): ...
          def validate_format(self, file): ...
          def backup_file(self, path): ...
          def read_file(self, path): ...
          def encrypt_file(self, path): ...
          def write_file(self, path, data): ...
          def restore_backup(self, backup_path): ...
          def decrypt_file(self, path): ...
          def delete_file(self, path): ...
      ```
    after: |
      ```python
      class FileProcessor:
          # Basic file operations
          def read_file(self, path): ...
          def write_file(self, path, data): ...
          def delete_file(self, path): ...
          def validate_format(self, file): ...
          
          # File transformations
          def compress_file(self, path): ...
          def encrypt_file(self, path): ...
          def decrypt_file(self, path): ...
          
          # Backup operations
          def backup_file(self, path): ...
          def restore_backup(self, backup_path): ...
      ```

  - scenario: User authentication system
    before: |
      ```python
      class UserAuth:
          def reset_password(self, email): ...
          def validate_password(self, password): ...
          def login(self, username, password): ...
          def send_verification_email(self, user): ...
          def logout(self, user): ...
          def hash_password(self, password): ...
          def register(self, user_data): ...
          def verify_email(self, token): ...
          def check_login_attempts(self, user): ...
      ```
    after: |
      ```python
      class UserAuth:
          # Registration and verification
          def register(self, user_data): ...
          def send_verification_email(self, user): ...
          def verify_email(self, token): ...
          
          # Login and logout
          def login(self, username, password): ...
          def logout(self, user): ...
          def check_login_attempts(self, user): ...
          
          # Password management
          def validate_password(self, password): ...
          def hash_password(self, password): ...
          def reset_password(self, email): ...
      ```

  - scenario: Image processing pipeline
    before: |
      ```python
      class ImageProcessor:
          def save_image(self, image, path): ...
          def resize_image(self, image, size): ...
          def load_image(self, path): ...
          def apply_blur(self, image): ...
          def rotate_image(self, image, angle): ...
          def enhance_contrast(self, image): ...
          def crop_image(self, image, bounds): ...
          def adjust_brightness(self, image, level): ...
          def convert_format(self, image, format): ...
      ```
    after: |
      ```python
      class ImageProcessor:
          # Image I/O
          def load_image(self, path): ...
          def save_image(self, image, path): ...
          def convert_format(self, image, format): ...
          
          # Geometric transformations
          def resize_image(self, image, size): ...
          def rotate_image(self, image, angle): ...
          def crop_image(self, image, bounds): ...
          
          # Visual enhancements
          def adjust_brightness(self, image, level): ...
          def enhance_contrast(self, image): ...
          def apply_blur(self, image): ...
      ```

  - scenario: Email notification service
    before: |
      ```python
      class EmailService:
          def validate_email(self, email): ...
          def send_welcome_email(self, user): ...
          def create_smtp_connection(self): ...
          def send_password_reset(self, user): ...
          def format_html_email(self, template, data): ...
          def send_newsletter(self, subscribers): ...
          def close_smtp_connection(self): ...
          def track_email_open(self, email_id): ...
          def create_email_template(self, content): ...
      ```
    after: |
      ```python
      class EmailService:
          # Connection management
          def create_smtp_connection(self): ...
          def close_smtp_connection(self): ...
          
          # Email composition
          def validate_email(self, email): ...
          def create_email_template(self, content): ...
          def format_html_email(self, template, data): ...
          
          # Email sending
          def send_welcome_email(self, user): ...
          def send_password_reset(self, user): ...
          def send_newsletter(self, subscribers): ...
          
          # Analytics
          def track_email_open(self, email_id): ...
      ```

  - scenario: Game player character
    before: |
      ```python
      class Player:
          def take_damage(self, amount): ...
          def move(self, direction): ...
          def heal(self, amount): ...
          def attack(self, target): ...
          def jump(self): ...
          def use_item(self, item): ...
          def run(self, direction): ...
          def cast_spell(self, spell, target): ...
          def is_alive(self): ...
      ```
    after: |
      ```python
      class Player:
          # Movement
          def move(self, direction): ...
          def run(self, direction): ...
          def jump(self): ...
          
          # Combat
          def attack(self, target): ...
          def cast_spell(self, spell, target): ...
          def take_damage(self, amount): ...
          
          # Health and items
          def heal(self, amount): ...
          def use_item(self, item): ...
          def is_alive(self): ...
      ```

  - scenario: Social media post manager
    before: |
      ```python
      class PostManager:
          def delete_post(self, post_id): ...
          def create_post(self, content): ...
          def get_post_analytics(self, post_id): ...
          def edit_post(self, post_id, content): ...
          def like_post(self, post_id, user_id): ...
          def share_post(self, post_id, user_id): ...
          def get_post(self, post_id): ...
          def comment_on_post(self, post_id, comment): ...
          def report_post(self, post_id, reason): ...
      ```
    after: |
      ```python
      class PostManager:
          # Post CRUD operations
          def create_post(self, content): ...
          def get_post(self, post_id): ...
          def edit_post(self, post_id, content): ...
          def delete_post(self, post_id): ...
          
          # Post interactions
          def like_post(self, post_id, user_id): ...
          def share_post(self, post_id, user_id): ...
          def comment_on_post(self, post_id, comment): ...
          
          # Moderation and analytics
          def report_post(self, post_id, reason): ...
          def get_post_analytics(self, post_id): ...
      ```

  - scenario: Banking account system
    before: |
      ```python
      class BankAccount:
          def get_transaction_history(self): ...
          def deposit(self, amount): ...
          def calculate_interest(self): ...
          def withdraw(self, amount): ...
          def check_balance(self): ...
          def transfer(self, target_account, amount): ...
          def freeze_account(self): ...
          def generate_statement(self): ...
          def unfreeze_account(self): ...
      ```
    after: |
      ```python
      class BankAccount:
          # Balance operations
          def check_balance(self): ...
          def deposit(self, amount): ...
          def withdraw(self, amount): ...
          def transfer(self, target_account, amount): ...
          
          # Account management
          def freeze_account(self): ...
          def unfreeze_account(self): ...
          def calculate_interest(self): ...
          
          # Reporting
          def get_transaction_history(self): ...
          def generate_statement(self): ...
      ```

  - scenario: Weather data collector
    before: |
      ```python
      class WeatherStation:
          def get_humidity(self): ...
          def calibrate_sensors(self): ...
          def get_temperature(self): ...
          def save_data_to_database(self, data): ...
          def get_wind_speed(self): ...
          def check_sensor_status(self): ...
          def get_pressure(self): ...
          def send_alert(self, message): ...
          def get_rainfall(self): ...
      ```
    after: |
      ```python
      class WeatherStation:
          # Sensor management
          def calibrate_sensors(self): ...
          def check_sensor_status(self): ...
          
          # Data collection
          def get_temperature(self): ...
          def get_humidity(self): ...
          def get_pressure(self): ...
          def get_wind_speed(self): ...
          def get_rainfall(self): ...
          
          # Data handling
          def save_data_to_database(self, data): ...
          def send_alert(self, message): ...
      ```

  - scenario: Music streaming player
    before: |
      ```python
      class MusicPlayer:
          def skip_to_next(self): ...
          def play(self): ...
          def add_to_queue(self, song): ...
          def pause(self): ...
          def set_volume(self, level): ...
          def create_playlist(self, name): ...
          def stop(self): ...
          def shuffle_playlist(self): ...
          def get_current_song(self): ...
      ```
    after: |
      ```python
      class MusicPlayer:
          # Playback controls
          def play(self): ...
          def pause(self): ...
          def stop(self): ...
          def skip_to_next(self): ...
          def set_volume(self, level): ...
          
          # Queue management
          def add_to_queue(self, song): ...
          def get_current_song(self): ...
          
          # Playlist features
          def create_playlist(self, name): ...
          def shuffle_playlist(self): ...
      ```

  - scenario: Recipe management system
    before: |
      ```python
      class RecipeManager:
          def scale_recipe(self, recipe_id, servings): ...
          def create_recipe(self, recipe_data): ...
          def calculate_nutrition(self, recipe_id): ...
          def delete_recipe(self, recipe_id): ...
          def generate_shopping_list(self, recipe_ids): ...
          def search_recipes(self, query): ...
          def edit_recipe(self, recipe_id, data): ...
          def rate_recipe(self, recipe_id, rating): ...
          def get_recipe(self, recipe_id): ...
      ```
    after: |
      ```python
      class RecipeManager:
          # Recipe CRUD
          def create_recipe(self, recipe_data): ...
          def get_recipe(self, recipe_id): ...
          def edit_recipe(self, recipe_id, data): ...
          def delete_recipe(self, recipe_id): ...
          def search_recipes(self, query): ...
          
          # Recipe utilities
          def scale_recipe(self, recipe_id, servings): ...
          def calculate_nutrition(self, recipe_id): ...
          def generate_shopping_list(self, recipe_ids): ...
          
          # User interactions
          def rate_recipe(self, recipe_id, rating): ...
      ```

  - scenario: Task scheduler system
    before: |
      ```python
      class TaskScheduler:
          def pause_task(self, task_id): ...
          def create_task(self, task_data): ...
          def get_task_status(self, task_id): ...
          def cancel_task(self, task_id): ...
          def resume_task(self, task_id): ...
          def schedule_task(self, task_id, time): ...
          def execute_task(self, task_id): ...
          def get_task_logs(self, task_id): ...
          def delete_task(self, task_id): ...
      ```
    after: |
      ```python
      class TaskScheduler:
          # Task lifecycle
          def create_task(self, task_data): ...
          def schedule_task(self, task_id, time): ...
          def execute_task(self, task_id): ...
          def delete_task(self, task_id): ...
          
          # Task control
          def pause_task(self, task_id): ...
          def resume_task(self, task_id): ...
          def cancel_task(self, task_id): ...
          
          # Task monitoring
          def get_task_status(self, task_id): ...
          def get_task_logs(self, task_id): ...
      ```

  - scenario: Inventory management system
    before: |
      ```python
      class InventoryManager:
          def generate_reorder_report(self): ...
          def add_item(self, item): ...
          def check_stock_levels(self): ...
          def remove_item(self, item_id): ...
          def update_item_price(self, item_id, price): ...
          def search_items(self, query): ...
          def process_shipment(self, shipment): ...
          def get_item(self, item_id): ...
          def track_item_movement(self, item_id): ...
      ```
    after: |
      ```python
      class InventoryManager:
          # Item management
          def add_item(self, item): ...
          def get_item(self, item_id): ...
          def remove_item(self, item_id): ...
          def search_items(self, query): ...
          def update_item_price(self, item_id, price): ...
          
          # Stock operations
          def check_stock_levels(self): ...
          def process_shipment(self, shipment): ...
          def track_item_movement(self, item_id): ...
          
          # Reporting
          def generate_reorder_report(self): ...
      ```

  - scenario: Chat messaging system
    before: |
      ```python
      class ChatManager:
          def delete_message(self, message_id): ...
          def send_message(self, chat_id, content): ...
          def mark_as_read(self, message_id): ...
          def create_chat_room(self, participants): ...
          def edit_message(self, message_id, content): ...
          def add_participant(self, chat_id, user_id): ...
          def get_chat_history(self, chat_id): ...
          def remove_participant(self, chat_id, user_id): ...
          def search_messages(self, query): ...
      ```
    after: |
      ```python
      class ChatManager:
          # Chat room management
          def create_chat_room(self, participants): ...
          def add_participant(self, chat_id, user_id): ...
          def remove_participant(self, chat_id, user_id): ...
          
          # Message operations
          def send_message(self, chat_id, content): ...
          def edit_message(self, message_id, content): ...
          def delete_message(self, message_id): ...
          def mark_as_read(self, message_id): ...
          
          # Message retrieval
          def get_chat_history(self, chat_id): ...
          def search_messages(self, query): ...
      ```

  - scenario: Video streaming service
    before: |
      ```python
      class VideoStreamer:
          def pause_video(self, stream_id): ...
          def start_stream(self, video_id): ...
          def get_stream_quality(self, stream_id): ...
          def stop_video(self, stream_id): ...
          def adjust_quality(self, stream_id, quality): ...
          def resume_video(self, stream_id): ...
          def get_playback_position(self, stream_id): ...
          def seek_to_position(self, stream_id, position): ...
          def get_stream_stats(self, stream_id): ...
      ```
    after: |
      ```python
      class VideoStreamer:
          # Stream control
          def start_stream(self, video_id): ...
          def pause_video(self, stream_id): ...
          def resume_video(self, stream_id): ...
          def stop_video(self, stream_id): ...
          
          # Playback navigation
          def get_playback_position(self, stream_id): ...
          def seek_to_position(self, stream_id, position): ...
          
          # Quality management
          def get_stream_quality(self, stream_id): ...
          def adjust_quality(self, stream_id, quality): ...
          def get_stream_stats(self, stream_id): ...
      ```

  - scenario: Event booking platform
    before: |
      ```python
      class EventBooking:
          def cancel_booking(self, booking_id): ...
          def create_event(self, event_data): ...
          def get_available_seats(self, event_id): ...
          def book_tickets(self, event_id, seats): ...
          def send_confirmation(self, booking_id): ...
          def update_event(self, event_id, data): ...
          def process_refund(self, booking_id): ...
          def get_booking_details(self, booking_id): ...
          def check_in_attendee(self, booking_id): ...
      ```
    after: |
      ```python
      class EventBooking:
          # Event management
          def create_event(self, event_data): ...
          def update_event(self, event_id, data): ...
          def get_available_seats(self, event_id): ...
          
          # Booking operations
          def book_tickets(self, event_id, seats): ...
          def get_booking_details(self, booking_id): ...
          def cancel_booking(self, booking_id): ...
          
          # Event day operations
          def check_in_attendee(self, booking_id): ...
          def send_confirmation(self, booking_id): ...
          def process_refund(self, booking_id): ...
      ```

  - scenario: Fitness tracking app
    before: |
      ```python
      class FitnessTracker:
          def set_daily_goal(self, user_id, goal): ...
          def log_workout(self, user_id, workout): ...
          def calculate_calories_burned(self, workout): ...
          def get_user_progress(self, user_id): ...
          def sync_wearable_data(self, device_id): ...
          def generate_weekly_report(self, user_id): ...
          def log_food_intake(self, user_id, food): ...
          def track_sleep(self, user_id, sleep_data): ...
          def create_workout_plan(self, user_id, preferences): ...
      ```
    after: |
      ```python
      class FitnessTracker:
          # Goal and plan management
          def set_daily_goal(self, user_id, goal): ...
          def create_workout_plan(self, user_id, preferences): ...
          
          # Activity logging
          def log_workout(self, user_id, workout): ...
          def log_food_intake(self, user_id, food): ...
          def track_sleep(self, user_id, sleep_data): ...
          def sync_wearable_data(self, device_id): ...
          
          # Analytics and reporting
          def calculate_calories_burned(self, workout): ...
          def get_user_progress(self, user_id): ...
          def generate_weekly_report(self, user_id): ...
      ```

  - scenario: Online learning platform
    before: |
      ```python
      class LearningPlatform:
          def submit_assignment(self, student_id, assignment): ...
          def enroll_student(self, course_id, student_id): ...
          def calculate_grade(self, student_id, course_id): ...
          def create_course(self, course_data): ...
          def track_progress(self, student_id, course_id): ...
          def generate_certificate(self, student_id, course_id): ...
          def grade_assignment(self, assignment_id, grade): ...
          def send_reminder(self, student_id, course_id): ...
          def unenroll_student(self, course_id, student_id): ...
      ```
    after: |
      ```python
      class LearningPlatform:
          # Course management
          def create_course(self, course_data): ...
          def enroll_student(self, course_id, student_id): ...
          def unenroll_student(self, course_id, student_id): ...
          
          # Assignment handling
          def submit_assignment(self, student_id, assignment): ...
          def grade_assignment(self, assignment_id, grade): ...
          def calculate_grade(self, student_id, course_id): ...
          
          # Student progress
          def track_progress(self, student_id, course_id): ...
          def generate_certificate(self, student_id, course_id): ...
          def send_reminder(self, student_id, course_id): ...
      ```

  - scenario: Food delivery service
    before: |
      ```python
      class DeliveryService:
          def update_order_status(self, order_id, status): ...
          def place_order(self, customer_id, items): ...
          def track_delivery(self, order_id): ...
          def assign_driver(self, order_id): ...
          def calculate_delivery_fee(self, distance): ...
          def cancel_order(self, order_id): ...
          def estimate_delivery_time(self, restaurant_id, address): ...
          def process_payment(self, order_id): ...
          def send_notification(self, customer_id, message): ...
      ```
    after: |
      ```python
      class DeliveryService:
          # Order management
          def place_order(self, customer_id, items): ...
          def update_order_status(self, order_id, status): ...
          def cancel_order(self, order_id): ...
          def process_payment(self, order_id): ...
          
          # Delivery coordination
          def assign_driver(self, order_id): ...
          def track_delivery(self, order_id): ...
          def estimate_delivery_time(self, restaurant_id, address): ...
          def calculate_delivery_fee(self, distance): ...
          
          # Communication
          def send_notification(self, customer_id, message): ...
      ```

  - scenario: Smart home controller
    before: |
      ```python
      class SmartHomeController:
          def adjust_thermostat(self, temperature): ...
          def turn_on_lights(self, room): ...
          def check_security_status(self): ...
          def turn_off_lights(self, room): ...
          def lock_doors(self): ...
          def set_alarm(self, time): ...
          def unlock_doors(self): ...
          def dim_lights(self, room, level): ...
          def arm_security_system(self): ...
      ```
    after: |
      ```python
      class SmartHomeController:
          # Lighting control
          def turn_on_lights(self, room): ...
          def turn_off_lights(self, room): ...
          def dim_lights(self, room, level): ...
          
          # Climate control
          def adjust_thermostat(self, temperature): ...
          
          # Security management
          def lock_doors(self): ...
          def unlock_doors(self): ...
          def arm_security_system(self): ...
          def check_security_status(self): ...
          def set_alarm(self, time): ...
      ```

  - scenario: Project management tool
    before: |
      ```python
      class ProjectManager:
          def update_task_status(self, task_id, status): ...
          def create_project(self, project_data): ...
          def assign_task(self, task_id, user_id): ...
          def generate_timeline(self, project_id): ...
          def create_task(self, project_id, task_data): ...
          def calculate_progress(self, project_id): ...
          def send_deadline_reminder(self, task_id): ...
          def delete_task(self, task_id): ...
          def archive_project(self, project_id): ...
      ```
    after: |
      ```python
      class ProjectManager:
          # Project lifecycle
          def create_project(self, project_data): ...
          def archive_project(self, project_id): ...
          def generate_timeline(self, project_id): ...
          def calculate_progress(self, project_id): ...
          
          # Task management
          def create_task(self, project_id, task_data): ...
          def update_task_status(self, task_id, status): ...
          def assign_task(self, task_id, user_id): ...
          def delete_task(self, task_id): ...
          
          # Notifications
          def send_deadline_reminder(self, task_id): ...
      ```

  - scenario: Cryptocurrency wallet
    before: |
      ```python
      class CryptoWallet:
          def get_transaction_history(self): ...
          def send_currency(self, recipient, amount, currency): ...
          def check_balance(self, currency): ...
          def generate_new_address(self, currency): ...
          def backup_wallet(self): ...
          def receive_currency(self, amount, currency): ...
          def restore_from_backup(self, backup_file): ...
          def calculate_portfolio_value(self): ...
          def encrypt_wallet(self, password): ...
      ```
    after: |
      ```python
      class CryptoWallet:
          # Balance and transactions
          def check_balance(self, currency): ...
          def send_currency(self, recipient, amount, currency): ...
          def receive_currency(self, amount, currency): ...
          def get_transaction_history(self): ...
          
          # Address management
          def generate_new_address(self, currency): ...
          
          # Security and backup
          def encrypt_wallet(self, password): ...
          def backup_wallet(self): ...
          def restore_from_backup(self, backup_file): ...
          
          # Portfolio analytics
          def calculate_portfolio_value(self): ...
      ```

  - scenario: Travel booking platform
    before: |
      ```python
      class TravelBooking:
          def cancel_booking(self, booking_id): ...
          def search_flights(self, origin, destination, date): ...
          def book_hotel(self, hotel_id, check_in, check_out): ...
          def book_flight(self, flight_id, passengers): ...
          def get_booking_confirmation(self, booking_id): ...
          def search_hotels(self, location, check_in, check_out): ...
          def modify_booking(self, booking_id, changes): ...
          def calculate_total_cost(self, booking_items): ...
          def send_itinerary(self, booking_id): ...
      ```
    after: |
      ```python
      class TravelBooking:
          # Search functionality
          def search_flights(self, origin, destination, date): ...
          def search_hotels(self, location, check_in, check_out): ...
          
          # Booking operations
          def book_flight(self, flight_id, passengers): ...
          def book_hotel(self, hotel_id, check_in, check_out): ...
          def modify_booking(self, booking_id, changes): ...
          def cancel_booking(self, booking_id): ...
          
          # Booking support
          def calculate_total_cost(self, booking_items): ...
          def get_booking_confirmation(self, booking_id): ...
          def send_itinerary(self, booking_id): ...
      ```