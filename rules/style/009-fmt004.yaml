title: Group functions by feature, not by type
id: FMT004

description: |-
  Code should be organized around business features and use cases rather than 
  technical implementation details. This creates more cohesive modules where 
  related functionality is co-located, making the codebase easier to navigate 
  and maintain.

problems_with_grouping_by_type:
  - Related functionality is scattered across multiple files
  - Developers must search multiple locations to understand a feature
  - Changes to a feature require editing multiple unrelated files
  - Code coupling is hidden by artificial organizational boundaries
  - Testing becomes more complex due to scattered dependencies
  - Domain knowledge is fragmented across technical boundaries

solutions_for_feature_based_organization:
  - Group all functions related to a business capability
  - Co-locate data structures with their operations
  - Organize modules around user stories or use cases
  - Keep related validation, processing, and formatting together
  - Use domain-driven design principles for module boundaries
  - Prefer cohesion over artificial separation

examples:
  - scenario: User authentication system
    before: |
      ```python
      # File: validators.py
      def validate_email(email): ...
      def validate_password(password): ...
      
      # File: formatters.py
      def format_user_display_name(user): ...
      
      # File: hashers.py
      def hash_password(password): ...
      ```
    after: |
      ```python
      # File: user_authentication.py
      def validate_email(email): ...
      def validate_password(password): ...
      def hash_password(password): ...
      def format_user_display_name(user): ...
      ```

  - scenario: E-commerce order processing
    before: |
      ```python
      # File: calculators.py
      def calculate_tax(amount, region): ...
      def calculate_shipping(weight, distance): ...
      
      # File: validators.py
      def validate_credit_card(card_number): ...
      
      # File: notifiers.py
      def send_order_confirmation(order): ...
      ```
    after: |
      ```python
      # File: order_processing.py
      def calculate_tax(amount, region): ...
      def calculate_shipping(weight, distance): ...
      def validate_credit_card(card_number): ...
      def send_order_confirmation(order): ...
      ```

  - scenario: Blog content management
    before: |
      ```javascript
      // File: parsers.js
      function parseMarkdown(content) { ... }
      
      // File: validators.js
      function validateSlug(slug) { ... }
      
      // File: sanitizers.js
      function sanitizeHtml(html) { ... }
      
      // File: generators.js
      function generateExcerpt(content) { ... }
      ```
    after: |
      ```javascript
      // File: content_management.js
      function parseMarkdown(content) { ... }
      function validateSlug(slug) { ... }
      function sanitizeHtml(html) { ... }
      function generateExcerpt(content) { ... }
      ```

  - scenario: Financial reporting system
    before: |
      ```python
      # File: calculators.py
      def calculate_profit_margin(revenue, costs): ...
      def calculate_roi(profit, investment): ...
      
      # File: formatters.py
      def format_currency(amount): ...
      def format_percentage(value): ...
      
      # File: generators.py
      def generate_balance_sheet(data): ...
      ```
    after: |
      ```python
      # File: financial_reporting.py
      def calculate_profit_margin(revenue, costs): ...
      def calculate_roi(profit, investment): ...
      def format_currency(amount): ...
      def format_percentage(value): ...
      def generate_balance_sheet(data): ...
      ```

  - scenario: Social media analytics
    before: |
      ```python
      # File: parsers.py
      def parse_engagement_data(data): ...
      def parse_follower_growth(data): ...
      
      # File: calculators.py
      def calculate_engagement_rate(likes, comments, followers): ...
      
      # File: visualizers.py
      def create_growth_chart(data): ...
      ```
    after: |
      ```python
      # File: social_media_analytics.py
      def parse_engagement_data(data): ...
      def parse_follower_growth(data): ...
      def calculate_engagement_rate(likes, comments, followers): ...
      def create_growth_chart(data): ...
      ```

  - scenario: Video streaming platform
    before: |
      ```python
      # File: encoders.py
      def encode_video(input_file, quality): ...
      
      # File: validators.py
      def validate_video_format(file): ...
      
      # File: generators.py
      def generate_thumbnail(video_file): ...
      def generate_subtitles(audio_track): ...
      ```
    after: |
      ```python
      # File: video_processing.py
      def validate_video_format(file): ...
      def encode_video(input_file, quality): ...
      def generate_thumbnail(video_file): ...
      def generate_subtitles(audio_track): ...
      ```

  - scenario: Healthcare patient management
    before: |
      ```python
      # File: validators.py
      def validate_insurance_number(number): ...
      def validate_medical_id(id): ...
      
      # File: calculators.py
      def calculate_bmi(height, weight): ...
      def calculate_age(birth_date): ...
      
      # File: formatters.py
      def format_patient_summary(patient): ...
      ```
    after: |
      ```python
      # File: patient_management.py
      def validate_insurance_number(number): ...
      def validate_medical_id(id): ...
      def calculate_bmi(height, weight): ...
      def calculate_age(birth_date): ...
      def format_patient_summary(patient): ...
      ```

  - scenario: Real estate property listing
    before: |
      ```python
      # File: calculators.py
      def calculate_price_per_sqft(price, area): ...
      def calculate_mortgage_estimate(price, down_payment): ...
      
      # File: formatters.py
      def format_property_address(address): ...
      
      # File: validators.py
      def validate_listing_data(data): ...
      ```
    after: |
      ```python
      # File: property_listing.py
      def validate_listing_data(data): ...
      def calculate_price_per_sqft(price, area): ...
      def calculate_mortgage_estimate(price, down_payment): ...
      def format_property_address(address): ...
      ```

  - scenario: Educational course management
    before: |
      ```python
      # File: validators.py
      def validate_course_code(code): ...
      def validate_enrollment_capacity(capacity): ...
      
      # File: calculators.py
      def calculate_grade_average(grades): ...
      def calculate_completion_rate(enrolled, completed): ...
      
      # File: generators.py
      def generate_certificate(student, course): ...
      ```
    after: |
      ```python
      # File: course_management.py
      def validate_course_code(code): ...
      def validate_enrollment_capacity(capacity): ...
      def calculate_grade_average(grades): ...
      def calculate_completion_rate(enrolled, completed): ...
      def generate_certificate(student, course): ...
      ```

  - scenario: Weather forecasting system
    before: |
      ```python
      # File: parsers.py
      def parse_weather_data(raw_data): ...
      def parse_satellite_imagery(image): ...
      
      # File: calculators.py
      def calculate_heat_index(temp, humidity): ...
      def calculate_wind_chill(temp, wind_speed): ...
      
      # File: formatters.py
      def format_forecast_display(forecast): ...
      ```
    after: |
      ```python
      # File: weather_forecasting.py
      def parse_weather_data(raw_data): ...
      def parse_satellite_imagery(image): ...
      def calculate_heat_index(temp, humidity): ...
      def calculate_wind_chill(temp, wind_speed): ...
      def format_forecast_display(forecast): ...
      ```

  - scenario: Gaming leaderboard system
    before: |
      ```python
      # File: calculators.py
      def calculate_player_score(achievements, time_played): ...
      def calculate_rank_change(old_score, new_score): ...
      
      # File: formatters.py
      def format_leaderboard_entry(player): ...
      
      # File: validators.py
      def validate_game_result(result): ...
      ```
    after: |
      ```python
      # File: leaderboard_system.py
      def validate_game_result(result): ...
      def calculate_player_score(achievements, time_played): ...
      def calculate_rank_change(old_score, new_score): ...
      def format_leaderboard_entry(player): ...
      ```

  - scenario: Inventory tracking system
    before: |
      ```python
      # File: validators.py
      def validate_sku(sku): ...
      def validate_quantity(quantity): ...
      
      # File: calculators.py
      def calculate_reorder_point(demand, lead_time): ...
      def calculate_inventory_value(items): ...
      
      # File: formatters.py
      def format_stock_report(inventory): ...
      ```
    after: |
      ```python
      # File: inventory_tracking.py
      def validate_sku(sku): ...
      def validate_quantity(quantity): ...
      def calculate_reorder_point(demand, lead_time): ...
      def calculate_inventory_value(items): ...
      def format_stock_report(inventory): ...
      ```

  - scenario: Email marketing campaign
    before: |
      ```python
      # File: validators.py
      def validate_email_list(emails): ...
      def validate_template_syntax(template): ...
      
      # File: generators.py
      def generate_personalized_content(template, user): ...
      
      # File: calculators.py
      def calculate_open_rate(sent, opened): ...
      def calculate_click_through_rate(opened, clicked): ...
      ```
    after: |
      ```python
      # File: email_marketing.py
      def validate_email_list(emails): ...
      def validate_template_syntax(template): ...
      def generate_personalized_content(template, user): ...
      def calculate_open_rate(sent, opened): ...
      def calculate_click_through_rate(opened, clicked): ...
      ```

  - scenario: Restaurant ordering system
    before: |
      ```python
      # File: validators.py
      def validate_menu_item(item): ...
      def validate_order_time(time): ...
      
      # File: calculators.py
      def calculate_order_total(items, tax_rate): ...
      def calculate_estimated_prep_time(items): ...
      
      # File: formatters.py
      def format_receipt(order): ...
      ```
    after: |
      ```python
      # File: restaurant_ordering.py
      def validate_menu_item(item): ...
      def validate_order_time(time): ...
      def calculate_order_total(items, tax_rate): ...
      def calculate_estimated_prep_time(items): ...
      def format_receipt(order): ...
      ```

  - scenario: Fitness tracking application
    before: |
      ```python
      # File: calculators.py
      def calculate_calories_burned(activity, duration, weight): ...
      def calculate_bmi(height, weight): ...
      
      # File: validators.py
      def validate_workout_data(data): ...
      
      # File: generators.py
      def generate_progress_report(user): ...
      ```
    after: |
      ```python
      # File: fitness_tracking.py
      def validate_workout_data(data): ...
      def calculate_calories_burned(activity, duration, weight): ...
      def calculate_bmi(height, weight): ...
      def generate_progress_report(user): ...
      ```

  - scenario: Music streaming service
    before: |
      ```python
      # File: parsers.py
      def parse_audio_metadata(file): ...
      def parse_playlist_data(data): ...
      
      # File: generators.py
      def generate_recommendations(user_history): ...
      
      # File: calculators.py
      def calculate_audio_quality_score(bitrate, format): ...
      ```
    after: |
      ```python
      # File: music_streaming.py
      def parse_audio_metadata(file): ...
      def parse_playlist_data(data): ...
      def calculate_audio_quality_score(bitrate, format): ...
      def generate_recommendations(user_history): ...
      ```

  - scenario: Travel booking platform
    before: |
      ```python
      # File: validators.py
      def validate_passport_number(number): ...
      def validate_travel_dates(dates): ...
      
      # File: calculators.py
      def calculate_flight_price(route, date, class): ...
      def calculate_hotel_total(nights, rate, taxes): ...
      
      # File: formatters.py
      def format_itinerary(booking): ...
      ```
    after: |
      ```python
      # File: travel_booking.py
      def validate_passport_number(number): ...
      def validate_travel_dates(dates): ...
      def calculate_flight_price(route, date, class): ...
      def calculate_hotel_total(nights, rate, taxes): ...
      def format_itinerary(booking): ...
      ```

  - scenario: Smart home automation
    before: |
      ```python
      # File: validators.py
      def validate_device_id(device_id): ...
      def validate_schedule(schedule): ...
      
      # File: calculators.py
      def calculate_energy_usage(devices, hours): ...
      
      # File: controllers.py
      def control_lights(rooms, brightness): ...
      def control_thermostat(temperature): ...
      ```
    after: |
      ```python
      # File: smart_home_automation.py
      def validate_device_id(device_id): ...
      def validate_schedule(schedule): ...
      def calculate_energy_usage(devices, hours): ...
      def control_lights(rooms, brightness): ...
      def control_thermostat(temperature): ...
      ```

  - scenario: Cryptocurrency trading bot
    before: |
      ```python
      # File: validators.py
      def validate_wallet_address(address): ...
      def validate_trade_amount(amount): ...
      
      # File: calculators.py
      def calculate_portfolio_value(holdings, prices): ...
      def calculate_risk_score(trades): ...
      
      # File: analyzers.py
      def analyze_market_trends(data): ...
      ```
    after: |
      ```python
      # File: crypto_trading.py
      def validate_wallet_address(address): ...
      def validate_trade_amount(amount): ...
      def calculate_portfolio_value(holdings, prices): ...
      def calculate_risk_score(trades): ...
      def analyze_market_trends(data): ...
      ```

  - scenario: Online learning platform
    before: |
      ```python
      # File: validators.py
      def validate_quiz_answers(answers): ...
      def validate_video_upload(file): ...
      
      # File: calculators.py
      def calculate_course_progress(completed, total): ...
      def calculate_grade(scores, weights): ...
      
      # File: generators.py
      def generate_study_plan(user, course): ...
      ```
    after: |
      ```python
      # File: online_learning.py
      def validate_quiz_answers(answers): ...
      def validate_video_upload(file): ...
      def calculate_course_progress(completed, total): ...
      def calculate_grade(scores, weights): ...
      def generate_study_plan(user, course): ...
      ```

  - scenario: Photo sharing social network
    before: |
      ```python
      # File: validators.py
      def validate_image_format(file): ...
      def validate_caption_length(caption): ...
      
      # File: processors.py
      def resize_image(image, dimensions): ...
      def apply_filter(image, filter_type): ...
      
      # File: generators.py
      def generate_feed(user_id): ...
      ```
    after: |
      ```python
      # File: photo_sharing.py
      def validate_image_format(file): ...
      def validate_caption_length(caption): ...
      def resize_image(image, dimensions): ...
      def apply_filter(image, filter_type): ...
      def generate_feed(user_id): ...
      ```

  - scenario: Project management tool
    before: |
      ```python
      # File: validators.py
      def validate_task_priority(priority): ...
      def validate_deadline(date): ...
      
      # File: calculators.py
      def calculate_project_progress(tasks): ...
      def calculate_team_workload(assignments): ...
      
      # File: generators.py
      def generate_gantt_chart(project): ...
      def generate_status_report(project): ...
      ```
    after: |
      ```python
      # File: project_management.py
      def validate_task_priority(priority): ...
      def validate_deadline(date): ...
      def calculate_project_progress(tasks): ...
      def calculate_team_workload(assignments): ...
      def generate_gantt_chart(project): ...
      def generate_status_report(project): ...
      ```

  - scenario: Podcast hosting platform
    before: |
      ```python
      # File: validators.py
      def validate_audio_file(file): ...
      def validate_rss_feed(feed): ...
      
      # File: processors.py
      def normalize_audio_levels(audio): ...
      def generate_transcript(audio): ...
      
      # File: analyzers.py
      def analyze_listener_demographics(data): ...
      ```
    after: |
      ```python
      # File: podcast_hosting.py
      def validate_audio_file(file): ...
      def validate_rss_feed(feed): ...
      def normalize_audio_levels(audio): ...
      def generate_transcript(audio): ...
      def analyze_listener_demographics(data): ...
      ```

  - scenario: Food delivery service
    before: |
      ```python
      # File: validators.py
      def validate_delivery_address(address): ...
      def validate_restaurant_hours(hours): ...
      
      # File: calculators.py
      def calculate_delivery_fee(distance, time): ...
      def calculate_estimated_arrival(prep_time, travel_time): ...
      
      # File: optimizers.py
      def optimize_delivery_route(orders): ...
      ```
    after: |
      ```python
      # File: food_delivery.py
      def validate_delivery_address(address): ...
      def validate_restaurant_hours(hours): ...
      def calculate_delivery_fee(distance, time): ...
      def calculate_estimated_arrival(prep_time, travel_time): ...
      def optimize_delivery_route(orders): ...
      ```